{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor LeftMotorsMotorA = motor(PORT2, ratio18_1, false);\nmotor LeftMotorsMotorB = motor(PORT9, ratio18_1, false);\nmotor_group LeftMotors = motor_group(LeftMotorsMotorA, LeftMotorsMotorB);\n\nmotor RightMotorsMotorA = motor(PORT10, ratio18_1, true);\nmotor RightMotorsMotorB = motor(PORT1, ratio18_1, true);\nmotor_group RightMotors = motor_group(RightMotorsMotorA, RightMotorsMotorB);\n\nmotor Arm = motor(PORT5, ratio18_1, false);\n\nmotor ShooterMotorA = motor(PORT6, ratio36_1, true);\nmotor ShooterMotorB = motor(PORT7, ratio36_1, false);\nmotor_group Shooter = motor_group(ShooterMotorA, ShooterMotorB);\n\nmotor Strafe = motor(PORT4, ratio18_1, false);\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\n\n// TERMS\n\n\n// User defined function\nvoid myblockfunction_Move_B_2_5_Turns();\n// User defined function\nvoid myblockfunction_Start_Shooter();\n// User defined function\nvoid myblockfunction_Move_Forward_5_Turns();\n// User defined function\nvoid myblockfunction_Move_Forward_4_Turns();\n// User defined function\nvoid myblockfunction_Spin_Motors_Forward();\n// User defined function\nvoid myblockfunction_set_Motors_velocity_to_50();\n// User defined function\nvoid myblockfunction_Turn_Left();\n// User defined function\nvoid myblockfunction_Move_Forward_3_Turns();\n// User defined function\nvoid myblockfunction_stop_Motors();\n// User defined function\nvoid myblockfunction_Move_Forward_2_Turns();\n// User defined function\nvoid myblockfunction_Move_Forward_1_Turn();\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat Distance;\n\nbool x;\n\n\n// DEFINITIONS\n\n\n// User defined function\n// Decimal points are defined as underscores\nvoid myblockfunction_Move_B_2_5_Turns() {\n  LeftMotors.spinFor(reverse, 2.5, turns, false);\n  RightMotors.spinFor(reverse, 2.5, turns, true);\n}\n\n// User defined function\nvoid myblockfunction_Start_Shooter() {\n  LeftMotors.spin(reverse);\n}\n\n// User defined function\nvoid myblockfunction_Move_Forward_5_Turns() {\n  LeftMotors.spinFor(forward, 5.0, turns, false);\n  RightMotors.spinFor(forward, 5.0, turns, true);\n}\n\n// User defined function\nvoid myblockfunction_Move_Forward_4_Turns() {\n  LeftMotors.spinFor(forward, 4.0, turns, false);\n  RightMotors.spinFor(forward, 4.0, turns, true);\n}\n\n// User defined function\nvoid myblockfunction_Spin_Motors_Forward() {\n  LeftMotors.spin(forward);\n  RightMotors.spin(forward);\n  Strafe.spin(forward);\n}\n\n// User defined function\nvoid myblockfunction_set_Motors_velocity_to_50() {\n  LeftMotors.setVelocity(50.0, percent);\n  RightMotors.setVelocity(50.0, percent);\n}\n\n// User defined function\nvoid myblockfunction_Turn_Left() {\n  LeftMotors.spin(reverse);\n  RightMotors.spin(forward);\n}\n\n// User defined function\nvoid myblockfunction_Move_Forward_3_Turns() {\n  LeftMotors.spinFor(forward, 3.0, turns, false);\n  RightMotors.spinFor(forward, 3.0, turns, true);\n}\n\n// User defined function\nvoid myblockfunction_stop_Motors() {\n  LeftMotors.stop();\n  RightMotors.stop();\n}\n\n// User defined function\nvoid myblockfunction_Move_Forward_2_Turns() {\n  LeftMotors.spinFor(forward, 2.0, turns, false);\n  RightMotors.spinFor(forward, 2.0, turns, true);\n}\n\n// User defined function\nvoid myblockfunction_Move_Forward_1_Turn() {\n  LeftMotors.spinFor(forward, 1.0, turns, false);\n  RightMotors.spinFor(forward, 1.0, turns, true);\n}\n\n// AUTONOMOUS\n\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Brain.Screen.print(\"AUTONOMOUS\");\n  RemoteControlCodeEnabled = false;\n  LeftMotors.setVelocity(75, percent);\n  RightMotors.setVelocity(75, percent);\n  LeftMotors.spinFor(forward, 4.2, turns, false);\n  RightMotors.spinFor(forward, 4.2, turns, true);\n  LeftMotors.spinFor(forward, 325, degrees, false);\n  RightMotors.spinFor(reverse, 325, degrees, true);\n  Arm.spin(forward);\n  wait(0.5, seconds);\n  Arm.stop();\n  Arm.setStopping(hold);\n  wait(0.5, seconds);\n  LeftMotors.spinFor(forward, 0.5, turns, false);\n  RightMotors.spinFor(forward, 0.5, turns, true);\n  LeftMotors.spinFor(reverse, 0.5, turns, false);\n  RightMotors.spinFor(reverse, 0.5, turns, true);\n  Arm.spin(reverse);\n  wait(0.5, seconds);\n  Arm.stop();\n  LeftMotors.spinFor(reverse, 305, degrees, false);\n  RightMotors.spinFor(forward, 305, degrees, true);\n  LeftMotors.spinFor(reverse, 2.3, turns, false);\n  RightMotors.spinFor(reverse, 2.3, turns, true);\n  LeftMotors.spinFor(reverse, 130, degrees, false);\n  RightMotors.spinFor(forward, 130, degrees, true);\n  LeftMotors.spinFor(reverse, 1.3, turns, false);\n  RightMotors.spinFor(reverse, 1.3, turns, true);\n  Arm.spin(forward);\n  wait(1.5, seconds);\n  Arm.stop();\n  Arm.setStopping(hold);\n  wait(0.5, seconds);\n  LeftMotors.setVelocity(40, percent);\n  RightMotors.setVelocity(40, percent);\n  LeftMotors.spinFor(forward, 1, turns, false);\n  RightMotors.spinFor(forward, 1, turns, true);\n  Arm.spin(reverse);\n  wait(0.5, seconds);\n  LeftMotors.setVelocity(75, percent);\n  LeftMotors.spinFor(reverse, 1.5, turns, true);\n  LeftMotors.setVelocity(100, percent);\n  RightMotors.setVelocity(100, percent);\n  LeftMotors.spinFor(forward, 3.5, turns, false);\n  RightMotors.spinFor(forward, 3.5, turns, true);\n  return 0;\n}\n\n\n// WHEN STARTED\n\n\n// \"when started\" hat block\nint whenStarted1() {\n  Controller1.rumble(\"-.-.\");\n  Brain.Screen.setCursor(2, 6);\n  Brain.Screen.setFillColor(red);\n  Brain.Screen.setFont(prop60);\n  Arm.setVelocity(25.0, percent);\n  Shooter.setVelocity(60.0, percent);\n  Shooter.setMaxTorque(1000.0, percent);\n  if (Brain.Battery.capacity() == 10.0) {\n    Controller1.rumble(\"----\");\n    Controller1.Screen.print(\"Battery Low\");\n    wait(5.0, seconds);\n    Controller1.Screen.clearLine(1);\n    Controller1.Screen.setCursor(Controller1.Screen.row(), 1);\n  }\n  if (LeftMotors.temperature(percent) == 90.0) {\n    Controller1.rumble(\"....\");\n    Controller1.Screen.print(\"Left Temp High\");\n    wait(5.0, seconds);\n    Controller1.Screen.clearLine(1);\n    Controller1.Screen.setCursor(Controller1.Screen.row(), 1);\n  }\n  if (RightMotors.temperature(percent) == 90.0) {\n    Controller1.rumble(\"....\");\n    Controller1.Screen.print(\"Right Temp High\");\n    wait(5.0, seconds);\n    Controller1.Screen.clearLine(1);\n    Controller1.Screen.setCursor(Controller1.Screen.row(), 1);\n  }\n  return 0;\n}\n\n\n// DRIVER CONTROL\n\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"Oopsie Woopsie, looks like we did a fucksie wucksie. Our code monkeys are working hard to find a sowution. UwU. Code Ewwor: (OxO555802)\");\n  RemoteControlCodeEnabled = true;\n  while (true) {\n    // x₁ = Left Motor X = [Controller] [3] position + [Controller] [1] position\n    // x₂ = Right Motor X = [Controller] [3] position - [Controller] [1] position\n    // Sets each motor's velocity to 0.0001x * |x| (shown as 0.0001 * x * |x|)\n    LeftMotors.setVelocity((0.01 * ((Controller1.Axis3.position() + Controller1.Axis1.position()) * fabs(static_cast<float>(Controller1.Axis3.position() + Controller1.Axis1.position())))), percent);\n    RightMotors.setVelocity((0.01 * ((Controller1.Axis3.position() - Controller1.Axis1.position()) * fabs(static_cast<float>(Controller1.Axis3.position() - Controller1.Axis1.position())))), percent);\n    Strafe.setVelocity(((0.01 * (Controller1.Axis4.position()) * fabs(static_cast<float>(Controller1.Axis4.position())))), percent);\n    myblockfunction_Spin_Motors_Forward();\n    if (Controller1.ButtonR1.pressing()) {\n      Shooter.spin(forward);\n    }\n    if (Controller1.ButtonR2.pressing()) {\n      Shooter.stop();\n    }\n    if (Controller1.ButtonL1.pressing()) {\n      Arm.spin(forward);\n    }\n    if (Controller1.ButtonL2.pressing()) {\n      Arm.spin(reverse);\n    }\n    if (Controller1.ButtonUp.pressing()) {\n      Arm.stop();\n      Arm.setMaxTorque(100, percent);\n    }\n    if (Controller1.ButtonX.pressing()) {\n      Shooter.setVelocity(20.0, percent);\n      Shooter.spinFor(forward, 150.0, degrees, false);\n      Shooter.setVelocity(50.0, percent);\n    }\n    Arm.setMaxTorque(100.0, percent);\n  wait(5, msec);\n  }\n  if (Brain.Timer.time(seconds) == 10.0) {\n    Controller1.rumble(\".\");\n    Controller1.Screen.print(\"10 Seconds\");\n    wait(2.0, seconds);\n    Controller1.Screen.clearLine(1);\n    Controller1.Screen.setCursor(Controller1.Screen.row(), 1);\n  }\n  return 0;\n}\n\n\n// COMEPTITION CODE\n\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"true","right":"","rightDir":"false","upDown":"","upDownDir":"true","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[2,9],"name":"LeftMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[10,1],"name":"RightMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[5],"name":"Arm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6,7],"name":"Shooter","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[4],"name":"Strafe","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"},{"name":"LNB","url":"legalize-nuclear-bombs.mp3"}],"v5SoundsEnabled":false,"target":"Physical"}